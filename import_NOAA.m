function [year,data] = import_NOAA(filename, startRow, endRow)
% import_NOAA function will import a data file from the NOAA dataset.
%  USAGE: [y,d]=read_data('ushcn.v2.5.0.20140213/USH00011084.FLs.52i.tavg')
% You can loop over all files reading the data in with this function.
% The function does not import the comment columns.
% -9999 are left as is.
%
%IMPORTFILE1 Import numeric data from a text file as column vectors.
%   [USH00266779,VARNAME2,JAN,VARNAME4,FEB,VARNAME6,MAR,VARNAME8,APR,VARNAME10,MAY,VARNAME12,JUN,VARNAME14,JUL,VARNAME16,AUG,VARNAME18,SEP,VARNAME20,OCT,VARNAME22,NOV,VARNAME24,DEC,VARNAME26,VARNAME27]
%   = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [USH00266779,VARNAME2,JAN,VARNAME4,FEB,VARNAME6,MAR,VARNAME8,APR,VARNAME10,MAY,VARNAME12,JUN,VARNAME14,JUL,VARNAME16,AUG,VARNAME18,SEP,VARNAME20,OCT,VARNAME22,NOV,VARNAME24,DEC,VARNAME26,VARNAME27]
%   = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [USH00266779,VarName2,Jan,VarName4,Feb,VarName6,Mar,VarName8,Apr,VarName10,May,VarName12,Jun,VarName14,Jul,VarName16,Aug,VarName18,Sep,VarName20,Oct,VarName22,Nov,VarName24,Dec,VarName26,VarName27]
%   = importfile1('USH00266779.FLs.52i.tavg',1, 127);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/11/30 15:11:01

%% Initialize variables.
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%11s%5s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%6s%3s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Exclude columns with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),1); % Find columns with non-numeric cells
raw(:,I) = [];

USH00266779 = [];
VarName2 = [];
Jan = [];
VarName4 = [];
Feb = [];
VarName6 = [];
Mar = [];
VarName8 = [];
Apr = [];
VarName10 = [];
May = [];
VarName12 = [];
Jun = [];
VarName14 = [];
Jul = [];
VarName16 = [];
Aug = [];
VarName18 = [];
Sep = [];
VarName20 = [];
Oct = [];
VarName22 = [];
Nov = [];
VarName24 = [];
Dec = [];
VarName26 = [];
VarName27 = [];
%% Initialize column outputs.
columnIndices = cumsum(~I);

%% Allocate imported array to column variable names
if ~I(1)
    USH00266779 = cell2mat(raw(:, columnIndices(1)));
end
if ~I(2)
    year = cell2mat(raw(:, columnIndices(2)));
end
if ~I(3)
    Jan = cell2mat(raw(:, columnIndices(3)));
end
if ~I(4)
    VarName4 = cell2mat(raw(:, columnIndices(4)));
end
if ~I(5)
    Feb = cell2mat(raw(:, columnIndices(5)));
end
if ~I(6)
    VarName6 = cell2mat(raw(:, columnIndices(6)));
end
if ~I(7)
    Mar = cell2mat(raw(:, columnIndices(7)));
end
if ~I(8)
    VarName8 = cell2mat(raw(:, columnIndices(8)));
end
if ~I(9)
    Apr = cell2mat(raw(:, columnIndices(9)));
end
if ~I(10)
    VarName10 = cell2mat(raw(:, columnIndices(10)));
end
if ~I(11)
    May = cell2mat(raw(:, columnIndices(11)));
end
if ~I(12)
    VarName12 = cell2mat(raw(:, columnIndices(12)));
end
if ~I(13)
    Jun = cell2mat(raw(:, columnIndices(13)));
end
if ~I(14)
    VarName14 = cell2mat(raw(:, columnIndices(14)));
end
if ~I(15)
    Jul = cell2mat(raw(:, columnIndices(15)));
end
if ~I(16)
    VarName16 = cell2mat(raw(:, columnIndices(16)));
end
if ~I(17)
    Aug = cell2mat(raw(:, columnIndices(17)));
end
if ~I(18)
    VarName18 = cell2mat(raw(:, columnIndices(18)));
end
if ~I(19)
    Sep = cell2mat(raw(:, columnIndices(19)));
end
if ~I(20)
    VarName20 = cell2mat(raw(:, columnIndices(20)));
end
if ~I(21)
    Oct = cell2mat(raw(:, columnIndices(21)));
end
if ~I(22)
    VarName22 = cell2mat(raw(:, columnIndices(22)));
end
if ~I(23)
    Nov = cell2mat(raw(:, columnIndices(23)));
end
if ~I(24)
    VarName24 = cell2mat(raw(:, columnIndices(24)));
end
if ~I(25)
    Dec = cell2mat(raw(:, columnIndices(25)));
end
if ~I(26)
    VarName26 = cell2mat(raw(:, columnIndices(26)));
end
if ~I(27)
    VarName27 = cell2mat(raw(:, columnIndices(27)));
end

data=[Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec];
